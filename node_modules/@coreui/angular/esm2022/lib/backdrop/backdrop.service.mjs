import { inject, Injectable, RendererFactory2 } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class BackdropService {
    constructor() {
        this.#backdropClick = new Subject();
        this.backdropClick$ = this.#backdropClick.asObservable();
        this.#document = inject(DOCUMENT);
        this.#rendererFactory = inject(RendererFactory2);
        this.#renderer = this.#rendererFactory.createRenderer(null, null);
        this.scrollbarWidth = this.#scrollbarWidth;
        this.#scrollBarVisible = true;
    }
    #backdropClick;
    #document;
    #rendererFactory;
    #renderer;
    #unListen;
    get #scrollbarWidth() {
        // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
        const documentWidth = this.#document.documentElement.clientWidth;
        // const scrollbarWidth = Math.abs((window?.innerWidth ?? documentWidth) - documentWidth);
        const scrollbarWidth = Math.abs((this.#document.defaultView?.innerWidth ?? documentWidth) - documentWidth);
        return `${scrollbarWidth}px`;
    }
    setBackdrop(type = 'modal') {
        const backdropElement = this.#renderer.createElement('div');
        this.#renderer.addClass(backdropElement, `${type}-backdrop`);
        this.#renderer.addClass(backdropElement, 'fade');
        this.#renderer.appendChild(this.#document.body, backdropElement);
        this.#unListen = this.#renderer.listen(backdropElement, 'click', (e) => {
            this.onClickHandler();
        });
        this.scrollbarWidth = this.#scrollbarWidth;
        setTimeout(() => {
            this.#renderer.addClass(backdropElement, 'show');
            // this.hideScrollbar();
        });
        this.activeBackdrop = backdropElement;
        return backdropElement;
    }
    clearBackdrop(backdropElement) {
        if (backdropElement) {
            this.#unListen();
            this.#renderer.removeClass(backdropElement, 'show');
            setTimeout(() => {
                this.#renderer.removeChild(this.#document.body, backdropElement);
                if (this.activeBackdrop === backdropElement) {
                    this.resetScrollbar();
                }
                backdropElement = undefined;
            }, 300);
        }
        return undefined;
    }
    get #isRTL() { return this.#document.documentElement.dir === 'rtl' || this.#document.body.dir === 'rtl'; }
    #scrollBarVisible;
    hideScrollbar() {
        if (this.#scrollBarVisible) {
            this.#renderer.setStyle(this.#document.body, 'overflow', 'hidden');
            this.#renderer.setStyle(this.#document.body, `padding-${this.#isRTL ? 'left' : 'right'}`, this.scrollbarWidth);
            this.#scrollBarVisible = false;
        }
    }
    resetScrollbar() {
        this.#renderer.removeStyle(this.#document.body, 'overflow');
        this.#renderer.removeStyle(this.#document.body, `padding-${this.#isRTL ? 'left' : 'right'}`);
        this.#scrollBarVisible = true;
    }
    onClickHandler() {
        this.#backdropClick.next(true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: BackdropService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: BackdropService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: BackdropService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,