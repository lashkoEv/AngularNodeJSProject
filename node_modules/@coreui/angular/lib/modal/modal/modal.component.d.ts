import { AnimationEvent } from '@angular/animations';
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { ModalService } from '../modal.service';
import { BackdropService } from '../../backdrop/backdrop.service';
import * as i0 from "@angular/core";
export declare class ModalComponent implements OnInit, OnDestroy, AfterViewInit {
    #private;
    private document;
    private renderer;
    private hostElement;
    private modalService;
    private backdropService;
    constructor(document: Document, renderer: Renderer2, hostElement: ElementRef, modalService: ModalService, backdropService: BackdropService);
    /**
     * Align the modal in the center or top of the screen.
     * @type {'top' | 'center'}
     * @default 'top'
     */
    alignment?: 'top' | 'center';
    /**
     * Apply a backdrop on body while modal is open.
     * @type boolean | 'static'
     * @default true
     */
    backdrop: boolean | 'static';
    /**
     * Set modal to cover the entire user viewport.
     * @type {boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'}
     * @default undefined
     */
    fullscreen?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
    /**
     * Closes the modal when escape key is pressed.
     * @type boolean
     * @default true
     */
    keyboard: boolean;
    id?: string;
    /**
     * Size the component small, large, or extra large.
     */
    size?: 'sm' | 'lg' | 'xl';
    /**
     * Remove animation to create modal that simply appear rather than fade in to view.
     */
    transition: boolean;
    /**
     * Default role for modal. [docs]
     * @type string
     * @default 'dialog'
     */
    role: string;
    /**
     * Set aria-modal html attr for modal. [docs]
     * @type boolean
     * @default null
     */
    set ariaModal(value: boolean | null);
    get ariaModal(): boolean | null;
    /**
     * Create a scrollable modal that allows scrolling the modal body.
     * @type boolean
     */
    scrollable: boolean;
    /**
     * Toggle the visibility of modal component.
     * @type boolean
     */
    set visible(value: boolean);
    get visible(): boolean;
    /**
     * Event triggered on modal dismiss.
     */
    visibleChange: EventEmitter<boolean>;
    modalContent: ElementRef;
    modalContentRef: ElementRef;
    get hostClasses(): any;
    get ariaHidden(): boolean | null;
    get tabIndex(): string | null;
    get animateTrigger(): string;
    get show(): boolean;
    set show(value: boolean);
    private _show;
    animateStart(event: AnimationEvent): void;
    animateDone(event: AnimationEvent): void;
    onKeyDownHandler(event: KeyboardEvent): void;
    private mouseDownTarget;
    onMouseDownHandler($event: MouseEvent): void;
    onClickHandler($event: MouseEvent): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private stateToggleSubscribe;
    private setBackdrop;
    private setBodyStyles;
    private setStaticBackdrop;
    static ɵfac: i0.ɵɵFactoryDeclaration<ModalComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ModalComponent, "c-modal", ["cModal"], { "alignment": { "alias": "alignment"; "required": false; }; "backdrop": { "alias": "backdrop"; "required": false; }; "fullscreen": { "alias": "fullscreen"; "required": false; }; "keyboard": { "alias": "keyboard"; "required": false; }; "id": { "alias": "id"; "required": false; }; "size": { "alias": "size"; "required": false; }; "transition": { "alias": "transition"; "required": false; }; "role": { "alias": "role"; "required": false; }; "ariaModal": { "alias": "ariaModal"; "required": false; }; "scrollable": { "alias": "scrollable"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; }, { "visibleChange": "visibleChange"; }, never, ["*"], true, never>;
    static ngAcceptInputType_keyboard: unknown;
    static ngAcceptInputType_transition: unknown;
    static ngAcceptInputType_scrollable: unknown;
    static ngAcceptInputType_visible: unknown;
}
